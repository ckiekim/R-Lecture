aggregate(Sales~Year, Fruits, max)
aggregate(Sales~Year, Fruits, mean)
aggregate(Sales~Fruit, Fruits, sum)
aggregate(Sales~Fruit, Fruits, max)
mat1 <- matrix(c(1:6), nrow = 2, byrow = T); mat1
apply(mat1, 1, sum)    # 1 - 행 단위 계산
apply(mat1, 2, sum)    # 2 - 열 단위 계산
apply(mat1, 1, prod)
apply(mat1[,c(2,3)], 1, sum)
list1 <- Fruits$Sales; list1
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
Fruits
tapply(Sales,Fruit,sum)
attach(Fruits)
tapply(Sales, Fruit, sum)
tapply(Sales, Year, sum)
vec2 <- c(10:50:10)
vec2 <- c(seq(10:50:10))
vec2 <- seq(10:50:10)
vec2 <- seq(10,50,10)
vec3 <- seq(100, 500, 100)
mapply(sum, vec1, vec2, vec3)
# apply() 계열 연습문제
data1<-read.csv("data1.csv")
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)], 2, sum)
apply(data1[,-1], 1, sum)
data2<-read.csv("1-4호선승하차승객수.csv")
attach(data2)
tapply(승차, 노선번호, sum)
sapply(data2[,c(3,4)], sum)
tapply(하차, 노선번호, sum)
tapply(승차+하차, 노선번호, sum)
aggregate(승차+하차~노선번호, data2, sum)
aggregate(승차~노선번호, data2, sum)
aggregate(하차~노선번호, data2, sum)
aggregate(하차~노선번호, data2, sum)
data1 <- read.csv("data1.csv")
data1
apply(data1[,c(2:15)], 2, sum)
apply(data1[,-1], 1, sum)
data2<-read.csv("1-4호선승하차승객수.csv")
data2
attach(data2)
tapply(승차, 노선번호, sum)
tapply(하차, 노선번호, sum)
sapply(data2[,c(3,4)], sum)
aggregate(승차~노선번호, data2, sum)
aggregate(하차~노선번호, data2, sum)
aggregate(승차+하차~노선번호, data2, sum)
# Function
mat1 <- matrix(c(1:6), nrow = 2, byrow = T)
a <- rep(1, 3)
sweep(mat1, 2, a)
b <- matrix(c(2, 2))
sweep(mat1, 1, b)
b
a <- c(1,2,3,4,5); length(a)
length(mat1)
library(googleVis)
length(Fruits)
log(10)
log10(10)
sin(pi)
abs(-1)
v2 <- c(1,-2,3,-4)
abs(v2)
ceiling(2.3)
floor(2.3)
ceiling(-2.3)
floor(-2.3)
round(2.5)
round(2.51)
?round()
choose(5, 3)
myfunc <- function() {
return(10)
}
myfunc <- function() {
return(10)
}
myfunc()
{
y = x * x;
return(y)
}
myfunc2 <- function(x) {
y = x * x;
return(y)
}
myfun2(-3)
myfunc2(-3)
# 연습문제
exfunc1 <- function(a, b) {
result <- a - b
return(result)
}
exfunc1(3, 5)
exfunc1(56, 34)
exfunc2 <- function(a, b) {
result <- abs(exfunc1(a, b))
return(result)
}
exfunc2(123, 456)
exfunc2(123, 456)
library(googleVis)
sort1 <- Fruits$Sales
sort1
sort(sort1)
sort(sort1, dec)
sort(sort1, decreasing = T)
library(plyr)
fruits <- read.csv("fruits_10.csv",header=T)
fruits
ddply(fruits, 'name', summarise, sum_qty=sum(qty), sum_price=sum(price))
ddply(fruits, 'name', summarise, max_qty=max(qty), min_price=min(price))
ddply(fruits, c('year', 'name'), summarise,
max_qty=max(qty), min_price=min(price))
ddply(fruits, 'name', transform, sum_qty=sum(qty),
pct_qty=(100*qty)/sum(qty))
library(dplyr)
data1 <- read.csv("2013년_프로야구선수_성적.csv")
data1
filter(data1, 경기 > 120)
filter(data1, 경기 > 120 & 득점 > 80)
filter(data1, 포지션=='1루수' | 포지션=='3루수')
filter(data1, 포지션 %in% c('1루수', '3루수'))
select(data1, 선수명, 포지션, 팀)
select(data1, 순위:타수)
select(data1, -홈런, -타점, -도루)
select(data1, -홈런:-도루)
select(data1, -홈런:-도루)
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
filter(타수 > 400)
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(타수)
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(desc(타수))
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(desc(경기))
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(desc(경기), desc(타수))
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
mutate(경기x타수 = 경기*타수) %>%
arrange(경기x타수)
data1 %>%
select(선수명, 팀, 출루율, 장타율) %>%
mutate(OPS = 출루율 + 장타율) %>%
arrange(desc(OPS))
data2 <- data1 %>%
select(선수명, 팀, 출루율, 장타율) %>%
mutate(OPS = 출루율 + 장타율) %>%
arrange(desc(OPS))
data2
data1 %<%
group_by(팀) %>%
summarise(average = mean(경기, na.rm))
data1 %<%
group_by(팀) %>%
summarise(average = mean(경기, na.rm = T))
data1 %>%
group_by(팀) %>%
summarise(average = mean(경기, na.rm = T))
data1 %>%
group_by(팀) %>%
summarise_each(funs(mean), 경기, 타수, 타율)
data1 %>%
group_by(팀) %>%
summarise_each(list(mean), 경기, 타수, 타율)
data1 %>%
group_by(팀) %>%
summarise_each(list(mean, n()), 경기, 타수)
data1 %>%
group_by(팀) %>%
summarise_each(funs(mean, n()), 경기, 타수)
# 연습문제
Fruits_2 <- filter(Fruits, Expenses > 80)
Fruits_2
Fruits_3 <- filter(Fruits, Expenses > 90 & Sales > 90)
Fruits_3
Fruits_4 <- filter(Fruits, Expenses > 90 | Sales > 80)
Fruits_4
Fruits_5 <- filter(Fruits, Expenses %in% c(79, 91))
Fruits_5
Fruits_6 <- select(Fruits, Fruit, Year, Sales)
Fru
Fruits_6
Fruits %>%
group_by(Fruit) %>%
summarise(average = sum(Sales, na.rm = T))
Fruits %>%
group_by(Fruit) %>%
summarise_each(list(sum), Sales, Profit)
libray(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
mpg
View(mpg)
#1
mpg %>%
group_by(cyl) %>%
summarise(hwy_mean = mean(hwy))
#1
mpg4 <- select(mpg, cyl <= 4)
#1
mpg4 <- filter(mpg, cyl <= 4)
mpg5 <- filter(mpg, cyl >= 5)
mean(mpg4); mean(mpg5)
mean(mpg4$hwy); mean(mpg5$hwy)
mpg4 <- filter(mpg, displ <= 4)
mpg5 <- filter(mpg, displ >= 5)
mean(mpg4$hwy); mean(mpg5$hwy)
#2
mpg_a <- filter(mpg, manufacturer=='audi')
mean(mpg_a$cty); mean(mpg_t$cty)
mpg_t <- filter(mpg, manufacturer=='toyota')
mean(mpg_a$cty); mean(mpg_t$cty)
mpg %>%
filter(manufacturer %in% c('audi', 'toyota')) %>%
group_by(manufacturer) %>%
summarise(average = mean(cty))
#3
mpg %>%
filter(manufacturer %in% c('chevrolet', 'ford', 'honda')) %>%
summarise(average = mean(hwy))
#4
mpg_4 <- select(mpg, class, cty)
head(mpg_4); tail(mpg_4)
#5
mpg_4 %>%
filter(class %in% ('suv', 'compact')) %>%
summarise(average = mean(cty))
#5
mpg_4 %>%
filter(class %in% ('suv', 'compact')) %>%
summarise(average = mean(cty))
#5
mpg_4 %>%
filter(class %in% c('suv', 'compact')) %>%
summarise(average = mean(cty))
#5
mpg_4 %>%
filter(class %in% c('suv', 'compact')) %>%
group_by(class) %>%
summarise(average = mean(cty))
#6
mpg %>%
filter(manufacturer == 'audi') %>%
select(manufacturer, model, hwy) %>%
arrange(desc(hwy))
#6
mpg %>%
filter(manufacturer == 'audi') %>%
select(manufacturer, model, hwy) %>%
arrange(desc(hwy)) %>%
head(5)
#7-1
mpg_new <- mpg %>%
mutate(cty_hwy = cty + hwy)
mpg_new
mpg_new(cty, hwy, cty_hwy)
mpg_new <- mpg %>%
mutate(cty_hwy = cty + hwy)
mpg_new(cty, hwy, cty_hwy)
View(mpg_new)
View(mpg_new)
#7-2
mpg_new <- mpg_new %>%
mutate(ch_avg = cty_hwy /2)
View(mpg_new)
View(mpg_new)
View(mpg_new)
#7-3
mpg_new %>%
arrange(desc(ch_avg)) %>%
head(3)
#7-4
mpg %>%
mutate(ch_avg = (cty + hwy)/2) %>%
arrange(desc(ch_avg)) %>%
head(3)
#8
mpg %>%
group_by(class) %>%
summarise(average = mean(cty))
#9
mpg %>%
group_by(class) %>%
summarise(average = mean(cty)) %>%
arrange(desc(average))
#10
mpg %>%
group_by(manufacturer) %>%
summarise(average = mean(hwy)) %>%
arrange(desc(average)) %>%
head(3)
#11
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count = n()) %>%
arrange(desc(count))
Fruits_6 <- select(Fruits, Fruit:Sales, -Location)
Fruits_6
mpg4 <- filter(mpg, displ <= 4)
mpg5 <- filter(mpg, displ >= 5)
mean(mpg4$hwy); mean(mpg5$hwy)
mpg_a <- filter(mpg, manufacturer=='audi')
mpg_t <- filter(mpg, manufacturer=='toyota')
mean(mpg_a$cty); mean(mpg_t$cty)
mpg %>%
filter(manufacturer %in% c('audi', 'toyota')) %>%
group_by(manufacturer) %>%
summarise(average = mean(cty))
mpg_4 <- select(mpg, class, cty)
head(mpg_4);
tail(mpg_4)
mpg %>%
mutate(cty_hwy = cty + hwy, ch_avg = cty_hwy/2) %>%
arrange(desc(ch_avg)) %>%
head(3)
#7-4
mpg %>%
select(-displ:-drv) %>%
mutate(cty_hwy = cty + hwy, ch_avg = cty_hwy/2) %>%
arrange(desc(ch_avg)) %>%
head(3)
#11
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count = n()) %>%
arrange(desc(count))
library(reshape2)
fruits
melt(fruits, id='year')
melt(fruits, id=c('year','name'))
melt(fruits, id=c('year','name'), variable.name='변수명',
value.name='변수값')
mtest <- melt(fruits, id=c('year','name'), variable.name='변수명',
value.name='변수값')
dcast(mtest, year+name~변수값)
dcast(mtest, year+name~변수명)
dcast(mtest, name~변수명, sum)
dcast(mtest, name~변수명, sum, subset=.(name=='apple'))
library(stringr)
fruits <- c('apple', 'Apple', 'banana', 'pineapple')
str_detect(fruits, 'A')
str_detect(fruits, 'a')
str_detect(fruits, '^a')
str_detect(fruits, 'e$')
str_detect(fruits, '^[aA]')
str_detect(fruits, '[aA]')
str_detect(fruits, ignore.case('a'))
str_detect(fruits, ignore.case('a'))
?ignore.case()
str_detect(fruits, regex('a', ignore.case = T))
str_detect(fruits, regex('a', ignore_case = T))
fruits
str_count(fruits, 'a')
str_c("apple", "banana")
str_c("Fruits: ",fruits)
str_c(fruits, " name is ", fruits)
str_c(fruits, collapse="")
str_c(fruits, collapse=",")
str_c(fruits, collapse=", ")
str_dup(fruits, 3)
str_length('apple')
str_length(fruits)
str_length('과일')
str_locate('apple', 'a')
str_locate(fruits, 'a')
str_locate('apple', 'app')
str_replace('apple', 'p', '*')
str_replace('apple', 'p', '++')
str_replace_all('apple', 'p', '*')
fruits <- str_c('apple','/','orange','/','banana')
fruits
str_split(fruits, "/")
(fruits, start=1, end=3)
str_sub(fruits, start=1, end=3)
str_sub(fruits, start=6, end=9)
str_sub(fruits, start=7)
str_sub(fruits, start=-5)
str_trim('  apple banana berry  ')
str_trim('\t  apple banana berry  ')
str_trim('  apple banana berry  \n   apple banana berry  ')
str_trim('  apple banana berry  \n')
library(googleVis)
Fruits
library(dplyr)
f2 <- filter(Fruits, Expenses>80)
f2
Fruits %>%
filter(Expenses>80)
Fruits
Fruits %>%
group_by(Fruit) %>%
mutate(sumSales = sum(Sales))
library(ggplot2)
View(mpg)
mpg %>%
select(manufacturer %in% c('audi', toyota))
library(dplyr)
mpg %>%
select(manufacturer %in% c('audi', toyota))
mpg %>%
select(manufacturer %in% c('audi', 'toyota'))
mpg %>%
filter(manufacturer %in% c('audi', 'toyota'))
mpg %>%
filter(manufacturer %in% c('audi', 'toyota')) %>%
group_by(manufacturer) %>%
summarise(고속도로연비평균=mean(hwy))
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda')) %>%
group_by(manufacturer) %>%
summarise(cty_avg = mena(cty))
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda')) %>%
group_by(manufacturer) %>%
summarise(cty_avg = mean(cty))
mpg %>%
mutate(avg_spd = (cty + hwy) / 2) %>%
group_by(class) %>%
summarise(class별평균속도 = mean(avg_spd)) %>%
arrange(desc(class별평균속도)) %>%
head(5)
mpg %>%
mutate(avg_spd = (cty + hwy) / 2) %>%
select(manufacturer, class, cty, hwy, avg_spd) %>%
head(5)
mtcars
mtcars %>%
mutate(mpg_per_disp = (mpg /disp)) %>%
arrang(desc(mpg_per_disp)) %>%
head(5)
mtcars %>%
mutate(mpg_per_disp = (mpg /disp)) %>%
arrange(desc(mpg_per_disp)) %>%
head(5)
mpg %>%
group_by(class) %>%
summarise(class별평균속도 = mean((cty + hwy) / 2)) %>%
arrange(desc(class별평균속도)) %>%
head(5)
mtcars %>%
group_by(cyl) %>%
summarise(avg_hp = mean(hp)) %>%
arrange(desc(avg_hp))
mtcars %>%
group_by(cyl) %>%
summarise(list(mean), disp, hp)
mtcars %>%
group_by(cyl) %>%
summarise_each(list(mean), disp, hp)
mtcars %>%
group_by(cyl) %>%
summarise_each(funs(mean, n()), disp, hp)
mtcars %>%
group_by(cyl) %>%
summarise_each(funs(mean, n()), disp, hp)
iris
iris %>%
group_by(Species) %>%
summarise_each(list(mean), Sepal.Length, Sepal.Width,
Petal.Length, Petal.Width)
library(sqldf)
song <- read.csv("d:/workspace/r_data_analysis/part3/data/song.csv")
song
song <- read.csv("d:/workspace/r_data_analysis/part3/data/song.csv", header = F, fileEncoding = 'utf-8')
song
girl <- read.csv("d:/workspace/r_data_analysis/part3/data/girl_group.csv",
header = F, fileEncoding = 'utf-8')
girl
names(song) <- c('_id', 'name', 'debut')
names(girl) <- c('_id', 'name', 'debut')
girl
names(song) <- c('_id', 'title', 'lyrics', 'girl_group_id')
song
sqldf('SELECT gg._id, gg.name, s.title FROM girl AS gg INNER JOIN song AS s
ON s._id = gg.hit_song_id')
sqldf('SELECT gg._id, gg.name, s.title FROM girl AS gg INNER JOIN song AS s
ON s.girl_group_id = gg._id')
sqldf('SELECT gg._id, gg.name, s.title FROM girl AS gg RIGHT JOIN song AS s
ON s.girl_group_id = gg._id')
sqldf('SELECT gg._id, gg.name, s.title FROM girl gg RIGHT JOIN song s
ON s.girl_group_id = gg._id')
library(googleVis)
sqldf(c('UPDATE Fruits SET Profit=50 WHERE Fruit=\'Apples\' AND Year=2008',
'SELECT * FROM Fruits'))
sqldf(c('DELETE FROM Fruits WHERE Fruit="Apples" AND Year=2008',
'SELECT * FROM Fruits'))
